/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

plugins {
  id "java"
  id "application"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

mainClassName = 'csa.Main'

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // Lombok for getters/setters/nonnull
	compileOnly 'org.projectlombok:lombok:1.18.8'
	//annotationProcessor 'org.projectlombok:lombok:1.18.12'
    
    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
	compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.0'
    
    
    compile group: 'org.jdbi', name: 'jdbi3-core', version: '3.12.2'
    
    // REST Server
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.+'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.+'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.+'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.+'
    compile 'org.glassfish.grizzly:grizzly-http-server:2.+'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.+'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.+'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.+'
}

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}